# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rFFnstv30LKOPggCGB6aLNT-a5GjBUOo

# Proyek Akhir: Menyelesaikan Permasalahan Perusahaan Edutech

- Nama: Hafiz caniago
- Email: hafizcode02@gmail.com
- Id Dicoding: hafizcaniago

# Business Understanding


Jaya Jaya Institut mengalami masalah tingginya angka dropout atau putus studi. Hal ini berdampak buruk terhadap reputasi institusi. Tujuan dari proyek ini adalah untuk membangun sistem prediktif menggunakan machine learning agar dapat mengidentifikasi siswa yang berpotensi dropout sejak dini. Dengan demikian, pihak institusi dapat memberikan perhatian dan intervensi khusus sebelum siswa memutuskan keluar dari institusi.

Objective: Memprediksi kemungkinan dropout seorang siswa berdasarkan data historis performa dan latar belakangnya.

# Persiapan

## Menyiapkan library yang dibutuhkan
"""

import pandas as pd
import joblib
import numpy as np
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

"""## Menyiapkan data yang akan diguankan"""

# Load data ke dataframe (csv punya separator ';')
df = pd.read_csv('data.csv', sep=';')
df.head(5)

"""## Data Understanding

Dataset yang digunakan memuat informasi dari berbagai aspek siswa seperti:

Status ekonomi dan latar belakang orang tua
Status kehadiran dan nilai akademik
Faktor eksternal seperti inflasi, pengangguran, dan GDP
Target kolom adalah Status yang terdiri dari dua nilai: Dropout dan Graduate.
"""

# Lihat Informasi Data
df.info();

"""# Data Preparation / Preprocessing"""

# Cek missing values
print("Missing values:")
print(df.isnull().sum())

"""**Menangani Outliers pada Data**"""

df.describe(include='all')

plt.figure(figsize=(5,3))
sns.boxplot(x=df['Curricular_units_2nd_sem_enrolled'])

plt.figure(figsize=(5,3))
sns.boxplot(x=df['Curricular_units_2nd_sem_evaluations'])

plt.figure(figsize=(5,3))
sns.boxplot(x=df['Curricular_units_2nd_sem_approved'])

# menghapus outlier
outlier_columns = ['Curricular_units_2nd_sem_enrolled', 'Curricular_units_2nd_sem_evaluations', 'Curricular_units_2nd_sem_approved']

Q1 = df[outlier_columns].quantile(0.25)
Q3 = df[outlier_columns].quantile(0.75)

IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

new_df = df[~((df[outlier_columns] < lower_bound) | (df[outlier_columns] > upper_bound)).any(axis=1)]

new_df.shape

# cek outlier fitur Curricular_units_2nd_sem_enrolled
plt.figure(figsize=(5,3))
sns.boxplot(x=new_df['Curricular_units_2nd_sem_enrolled'])

# Mengubah Target Fitur dari Kategorikal jadi Boolean
new_df['Status'] = new_df['Status'].map({'Graduate': 1, 'Dropout': 0, 'Enrolled': 1}).fillna(new_df['Status'])

"""# Exploratory Data Analysis

Disini saya melakukan eksplorasi dan visualisasi terhadap beberapa data, yaitu berupa visualisasi jumlah kategori target yang ada, analisis hubungan performa akademik dengan status dropout, dan korelasi fitur numerik
"""

# Ambil nilai unik untuk fitur kategorikal
categorical_features = new_df.select_dtypes(include=['object']).columns

# Cek distribusi target
target_counts = new_df['Status'].value_counts()

# Visualisasi target distribusi
plt.figure(figsize=(13, 6))
ax = sns.countplot(x='Status', data=new_df, palette='viridis')
plt.title('Distribution of Target Variable (Status)')
plt.xlabel('Status')
plt.ylabel('Count')
plt.tight_layout()
plt.show()

# Analisisi hubungunan antara performa akademik dengan status dropout
plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
sns.boxplot(x='Status', y='Curricular_units_1st_sem_grade', data=new_df)
plt.title('1st Semester Grades by Status')
plt.xlabel('Status')
plt.ylabel('Grade')

plt.subplot(1, 2, 2)
sns.boxplot(x='Status', y='Curricular_units_2nd_sem_grade', data=new_df)
plt.title('2nd Semester Grades by Status')
plt.xlabel('Status')
plt.ylabel('Grade')

plt.tight_layout()
plt.show()

"""**Korelasi Fitur Numerik**"""

plt.figure(figsize=(20, 10))
sns.heatmap(data=new_df.corr(), annot=True, cmap='coolwarm', linewidths=0.5, fmt=".2f")
plt.title("Korelasi Untuk Fitur Numerik", size=20)

new_df.corrwith(new_df['Status']).sort_values(ascending=False)

"""pada hasil korelasi, terdapat 10 fitur tertinggi yang dapat dijadikan sebagai fitur untuk pelatihan model :

- Curricular_units_2nd_sem_approved
- Circular_units_2nd_sem_grade
- Curricular_units_1st_sem_approved
- Curricular_units_1st_sem_grade
- Tuition_fees_up_to_date
- Scholarship_holder
- Curricular_units_2nd_sem_enrolled
- Curricular_units_2nd_sem_evaluations
- Curricular_units_1st_sem_enrolled
- Displaced

# Modeling

Pada tahap modeling ini akan dilakukan pemilihan data untuk inputan, dan data splitting untuk training dan testing. untuk targetnya sendiri sekarang akan terbatas pada Graduate & Dropout. serta di akhir kita akan melakukan pembuatan model menggunakan algoritma neural network.
"""

# mempersiapkan variable untuk digunakan prediksi
selected_df = new_df[[
   "Curricular_units_2nd_sem_approved",
   "Curricular_units_2nd_sem_grade",
   "Curricular_units_1st_sem_approved",
   "Curricular_units_1st_sem_grade",
   "Tuition_fees_up_to_date",
   "Scholarship_holder",
   "Curricular_units_2nd_sem_enrolled",
   "Curricular_units_1st_sem_enrolled",
   "Curricular_units_2nd_sem_evaluations",
   "Displaced", "Status",
]]

selected_df.head()

for column in selected_df.columns.drop(['Status', 'Curricular_units_2nd_sem_grade', 'Curricular_units_1st_sem_grade']):
  sns.catplot(x=column, kind='count', dodge=False, palette="Set3", hue='Status', height=3, aspect=2, data=selected_df)
  plt.xlabel(column.capitalize())
  # plt.xticks(rotation=45)
  plt.show()
  print("\n")

selected_df.to_csv("cleaned.csv", index=False)

selected_df.describe()

# bagi data latih dan data uji
x = selected_df.drop(['Status'], axis=1)
y = selected_df['Status']


x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)

x_train

print(f"Total data latih : {len(x_train)}")
print(f"Total data uji : {len(x_test)}")

nn_classifier = MLPClassifier(hidden_layer_sizes=10,
                              activation='relu',
                              n_iter_no_change=30,
                              solver='adam')
nn_classifier.fit(x_train, y_train)

joblib.dump(nn_classifier, 'student_dropout_model.joblib')

"""# Evaluation"""

# akurasi
predict = nn_classifier.predict(x_test)

accuracy = accuracy_score(y_test, predict)
print(f"Akurasi : {accuracy}")

# classification report
class_report = classification_report(y_test, predict)
print(class_report)

# konfusion matriks
conf = confusion_matrix(y_test, predict)

plt.figure(figsize=(3,3))
sns.heatmap(conf, annot=True, fmt='d', cmap='crest', cbar=False)

# Add labels and title
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')

"""# Model Inference"""

data_to_predict = {
   "Curricular_units_2nd_sem_approved": 7,
   "Curricular_units_2nd_sem_grade": 12,
   "Curricular_units_1st_sem_approved" : 2,
   "Curricular_units_1st_sem_grade": 10,
   "Tuition_fees_up_to_date": 1,
   "Scholarship_holder": 0,
   "Curricular_units_2nd_sem_enrolled": 3,
   "Curricular_units_1st_sem_enrolled": 7,
   "Curricular_units_2nd_sem_evaluations": 10,
   "Displaced": 1
}

data_predict_df = pd.DataFrame(data_to_predict, index=[0])

result = nn_classifier.predict_proba(data_predict_df)


label = ['Dropout', 'No Dropout']
print("Probability", result)
print(f"Result : {label[np.argmax(result)]}")

res = nn_classifier.predict(data_predict_df)
label[np.argmax(res)]